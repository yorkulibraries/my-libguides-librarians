#!/usr/bin/env ruby
#!/usr/bin/env /usr/local/bin/ruby

# William Denton <wtd@pobox.com>
# Usage: find-my-librarian?programs=ap/econ,fa/film
#
# Call as a web service: give it a program and it will return an RSS feed
# linking to the LibGuides profile for the right subject librarian
# or the right reference desk

# Course codes look like this (for "Romain Elegaic Poetry"):
# 2012_AP_IT_Y_2751__9_A_EN_A_LECT_01
# 
# Year           : 2012
# Faculty        : AP
# Subject        : IT
# Period         : Y (F = fall, W = winter, SU, S1, S2 = summer)
# ID             : 2751
# Rubric variance: _ (if it is blank, replace with an extra underscore)
# Credit weight  : 9
# Section        : A
# Language       : EN
# Course type    : A (internal code)
# Format         : LECT
# Group          : 01

# (Note to self regarding other services:
# "The moodle service breaks the standard course codes into relevant
# pieces and passes them to the underlying feeds."
# E.g. http://www.library.yorku.ca/eris/fetch/tagged_urls.rss?prefix=s&tag=ap/it

require 'cgi'
require 'net/http'
require 'rss'
cgi = CGI.new

mapfile = "/var/www/html/libguides-mapping.txt"

libguides_profile_url = "http://researchguides.library.yorku.ca/profile.php?uid="

params = cgi.params
courses = params["courses"][0].split(",")

programs = []

# This script works by looking at only the full coursecodes passed in.
# It would be easy to make it look at a list of program codes also
# passed in, too.

begin
  courses.each do |coursecode|
    coursecode.downcase! # Simplifies things throughout
    elements = /(\d{4})_(\w*)_(\w*)_(\w*)_(\d*)_(.)(\d)_(\w)_(\w{2})_(\w)_(\w*)_(\d{2})/.match(coursecode)
    raise "ERROR: Bad course code #{coursecode}" if elements.nil?
    faculty_code = elements[2]
    program_code = elements[3]
    programs.push("#{faculty_code}/#{program_code}")
  end
rescue Exception => e 
  $stderr.puts e
end

if programs.length == 0
  # If no program is specified we still want to suggest
  # the default, so put in a fake program no-one will see
  programs[0] = "xx/xxxx"
end

# Keep a list of librarians/desks recommended.  Don't add one to
# the My Librarian feed if it's already been added.  (I found it)
# easier to keep a separate list than grok the RSS structure, but
# I know it's inelegant.  
recommended = []

rss = RSS::Maker.make("atom") do |maker|
  maker.channel.author = "York University Libraries"
  maker.channel.updated = Time.now.to_s
  maker.channel.about = "http://researchguides.library.yorku.ca/"
  maker.channel.title = "My Librarian (York University Libraries)"
  
  File.open(mapfile).each do |row|        # For each librarian ...
    profile_info = row.split("|")
    subjects = profile_info[2].split(",")
    librarian_name = profile_info[0]
    # puts librarian_name
    subjects.each do |subject|            # look at each subject they handle ...
      subject.gsub!(/s:/, "")
      # puts subject
      if /(..)\/\*/.match(subject)        # check for wildcards like s:fa/* ...
        faculty = subject[0..1]
        # puts faculty
      end
      programs.each do |program|          # and compare it to the programs passed in
        if (subject =~ /#{program}/i) or (!faculty.nil? and program[0..1] == faculty)
          # Either there is an exact match between program submitted and librarian subject (hh/psych and hh/psych)
          # or there is a wildcard match (hh/psych and a librarian covers hh/*)
          url = libguides_profile_url + profile_info[1]
          if recommended.index(librarian_name).nil? # The librarian/desk isn't listed already
            maker.items.new_item do |item|
              item.link = url
              item.title = librarian_name
              item.updated = Time.now.to_s
            end
            # Since this program is now matched, remove it from the list
            programs.delete(program)
            # And add the librarian/desk to the list so we don't recommend him/her/it again
            recommended.push(librarian_name)
          end
        end
      end
    end
  end

  # If no matches were found we fall back to suggesting default ref desks
  programs.each do |program|
    # We're now looping through all of the programs that don't have a known
    # librarian or research help desk.  There will probably only be one
    # but there might be two.
    faculty = program[0..1]
    case faculty
    when "gl" then 
      url = "http://www.library.yorku.ca/cms/frost/"
      title = "Frost Library research help"
    when "hh" then 
      url = "http://www.library.yorku.ca/cms/steacie/"
      title = "Steacie Library research help"
    when "lw" then 
      url = "http://www.osgoode.yorku.ca/library/what-we-do/reference-research"
      title = "Law Library research help"
    when "sb" then 
      url = "http://www.library.yorku.ca/cms/bbl/guides/researchhelp/"
      title = "Bronfman Library research help"
    when "sc" then 
      url = "http://www.library.yorku.ca/cms/steacie/"
      title = "Steacie Library research help"
    else  # Otherwise, default to Scott (for fa, ap, es)
      url = "http://www.library.yorku.ca/cms/scottreference/"
      title = "Scott Library research help"
    end
    if recommended.index(title).nil? # The librarian/desk isn't listed already
      maker.items.new_item do |item|
        item.link = url
        item.title = title
        item.updated = Time.now.to_s
      end
      recommended.push(title)
    end
  end
  
end


puts "Content-type: application/xml"
puts
puts rss

